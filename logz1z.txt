Starting test
Test 1 - Simplest copying of files from FolderA to FolderB.
Program will not use any extra parameters.
Since the base waiting time is 300 seconds, SIGUSR1 will be sent after 5 seconds
Creating test files...
Creating test files... Done.
Listing test files...
FolderA
├── A.txt
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 4 files
 
File in folder A:
2022-04-30 08:54:22.109986344 -0400
 
FolderB
└── A.txt

0 directories, 1 file
 
File in folder B:
2022-04-30 05:54:22.245566032 -0400
 
Running program...
1..
2..
3..
4..
5..
Sending SIGUSR1 signal...
Copying files... Done.
Showing results...
FolderA
├── A.txt
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 4 files
 
File in folder A:
2022-04-30 08:54:22.109986344 -0400
 
FolderB
├── A.txt
└── plik16MB.txt

0 directories, 2 files
 
File in folder B:
2022-04-30 08:54:29.342368341 -0400
 
Removing test files...
Removing test files... Done.
Test 1 - Finished
 
 
Test 2 - Copying files from FolderA to FolderB with recursive option.
Program will use -R option, making it recursive.
Program will use -t 0 option, making it start instantly without waiting.
Program will use -s 32000000, making it copy files smaller than 32MB bytes using copy/write, and files bigger than 32MB using mmap/write.
Creating test files...
Creating test files... Done.
Listing test files...
FolderA
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 3 files
FolderB

0 directories, 0 files
Running program...
Copying files... Done.
Showing results...
FolderA
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 3 files
FolderB
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 3 files
 
Removing test files...
Removing test files... Done.
Test 2 - Finished
 
Test 3 - Copying files from FolderA to FolderB, with files in FolderB that do not exist in FolderA.
Program will use -t 0 option, making it start instantly without waiting.
Program will use -s 32000000, making it copy files smaller than 32MB bytes using copy/write, and files bigger than 32MB using mmap/write.
Creating test files...
Creating test files... Done.
Listing test files...
FolderA
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 3 files
FolderB
├── plik8MB.txt
└── SubFolderB
    └── plik32MB.txt

1 directory, 2 files
Running program...
Copying files... Done.
Showing results...
FolderA
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 3 files
FolderB
├── plik16MB.txt
└── SubFolderB
    └── plik32MB.txt

1 directory, 2 files
Removing test files...
Removing test files... Done.
Test 3 - Finished
 
Test 4 - Copying files from FolderA to FolderB.
FolderB will contain SubFolderB containing SubFolderC containing random files.
SubFolderB does not exist in FolderA
FolderA and FolderB will contain files with the same size and content, but different names.
Program will use -R option, making it recursive.
Program will use -t 0 option, making it start instantly without waiting.
Program will use -s 32000000, making it copy files smaller than 32MB bytes using copy/write, and files bigger than 32MB using mmap/write.
Creating test files...
Creating test files... Done.
Listing test files...
FolderA
├── plik16MB_A.txt
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 4 files
FolderB
├── plik16MB_B.txt
├── plik16MB.txt
└── SubFolderB
    ├── plik8MB.txt
    └── SubFolderC
        └── plik8MB.txt

2 directories, 4 files
Running program...
Copying files... Done.
Showing results...
FolderA
├── plik16MB_A.txt
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 4 files
FolderB
├── plik16MB_A.txt
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 4 files
Removing test files...
Removing test files... Done.
Test 4 - Finished
 
Test 5 - Valgrind
Program will use Valgrind to check for memory leaks.
Program will use -R option, making it recursive.
Program will use -t 0 option, making it start instantly without waiting.
Program will use -s 32000000, making it copy files smaller than 32MB bytes using copy/write, and files bigger than 32MB using mmap/write.
Creating test files...
Creating test files... Done.
Listing test files...
FolderA
├── plik16MBA.txt
├── plik16MBB.txt
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 5 files
FolderB
└── SubFolderB
    ├── plik8MB.txt
    └── SubFolderC
        ├── plik8MB.txt
        └── SubFolderD
            └── plik8MB.txt

3 directories, 3 files
Running program...
Copying files... Done.
Showing results...
FolderA
├── plik16MBA.txt
├── plik16MBB.txt
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 5 files
FolderB
├── plik16MBA.txt
├── plik16MBB.txt
├── plik16MB.txt
└── SubFolderA
    ├── plik16MB.txt
    └── plik64MB.txt

1 directory, 5 files
Removing test files...
Removing test files... Done.
Test 5 - Finished
 
All tests finished.
Valgrind logs can be found in valgrindlogs.txt
Syslogs can be found in syslogs.txt
